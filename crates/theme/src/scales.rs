use gpui::{Hsla, hsla};

/// A color scale with 11 shades (50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950)
/// similar to Tailwind CSS color scales.
#[derive(Debug, Clone, Copy)]
pub struct ColorScale {
    pub shade_50: Hsla,
    pub shade_100: Hsla,
    pub shade_200: Hsla,
    pub shade_300: Hsla,
    pub shade_400: Hsla,
    pub shade_500: Hsla,
    pub shade_600: Hsla,
    pub shade_700: Hsla,
    pub shade_800: Hsla,
    pub shade_900: Hsla,
    pub shade_950: Hsla,
}

impl ColorScale {
    /// Create a new color scale from Hsla values
    pub const fn new(
        shade_50: Hsla,
        shade_100: Hsla,
        shade_200: Hsla,
        shade_300: Hsla,
        shade_400: Hsla,
        shade_500: Hsla,
        shade_600: Hsla,
        shade_700: Hsla,
        shade_800: Hsla,
        shade_900: Hsla,
        shade_950: Hsla,
    ) -> Self {
        Self {
            shade_50,
            shade_100,
            shade_200,
            shade_300,
            shade_400,
            shade_500,
            shade_600,
            shade_700,
            shade_800,
            shade_900,
            shade_950,
        }
    }

    /// Get a shade by its number (50, 100, 200, etc.)
    pub fn get(&self, shade: u16) -> Option<Hsla> {
        match shade {
            50 => Some(self.shade_50),
            100 => Some(self.shade_100),
            200 => Some(self.shade_200),
            300 => Some(self.shade_300),
            400 => Some(self.shade_400),
            500 => Some(self.shade_500),
            600 => Some(self.shade_600),
            700 => Some(self.shade_700),
            800 => Some(self.shade_800),
            900 => Some(self.shade_900),
            950 => Some(self.shade_950),
            _ => None,
        }
    }
}

/// Collection of all color scales, similar to Tailwind CSS
#[derive(Debug, Clone, Copy)]
pub struct ColorScales {
    pub slate: ColorScale,
    pub gray: ColorScale,
    pub zinc: ColorScale,
    pub neutral: ColorScale,
    pub stone: ColorScale,
    pub red: ColorScale,
    pub orange: ColorScale,
    pub amber: ColorScale,
    pub yellow: ColorScale,
    pub lime: ColorScale,
    pub green: ColorScale,
    pub emerald: ColorScale,
    pub teal: ColorScale,
    pub cyan: ColorScale,
    pub sky: ColorScale,
    pub blue: ColorScale,
    pub indigo: ColorScale,
    pub violet: ColorScale,
    pub purple: ColorScale,
    pub fuchsia: ColorScale,
    pub pink: ColorScale,
    pub rose: ColorScale,
}

impl ColorScales {
    /// Create default Tailwind CSS-like color scales
    pub fn tailwind() -> Self {
        Self {
            slate: slate(),
            gray: gray(),
            zinc: zinc(),
            neutral: neutral(),
            stone: stone(),
            red: red(),
            orange: orange(),
            amber: amber(),
            yellow: yellow(),
            lime: lime(),
            green: green(),
            emerald: emerald(),
            teal: teal(),
            cyan: cyan(),
            sky: sky(),
            blue: blue(),
            indigo: indigo(),
            violet: violet(),
            purple: purple(),
            fuchsia: fuchsia(),
            pink: pink(),
            rose: rose(),
        }
    }
}

// Macro to define a color scale function with less repetition
macro_rules! scale {
    ($name:ident, [
        ($h50:expr, $s50:expr, $l50:expr),   // 50
        ($h100:expr, $s100:expr, $l100:expr), // 100
        ($h200:expr, $s200:expr, $l200:expr), // 200
        ($h300:expr, $s300:expr, $l300:expr), // 300
        ($h400:expr, $s400:expr, $l400:expr), // 400
        ($h500:expr, $s500:expr, $l500:expr), // 500
        ($h600:expr, $s600:expr, $l600:expr), // 600
        ($h700:expr, $s700:expr, $l700:expr), // 700
        ($h800:expr, $s800:expr, $l800:expr), // 800
        ($h900:expr, $s900:expr, $l900:expr), // 900
        ($h950:expr, $s950:expr, $l950:expr)  // 950
    ]) => {
        pub fn $name() -> ColorScale {
            ColorScale::new(
                hsla($h50, $s50, $l50, 1.0),
                hsla($h100, $s100, $l100, 1.0),
                hsla($h200, $s200, $l200, 1.0),
                hsla($h300, $s300, $l300, 1.0),
                hsla($h400, $s400, $l400, 1.0),
                hsla($h500, $s500, $l500, 1.0),
                hsla($h600, $s600, $l600, 1.0),
                hsla($h700, $s700, $l700, 1.0),
                hsla($h800, $s800, $l800, 1.0),
                hsla($h900, $s900, $l900, 1.0),
                hsla($h950, $s950, $l950, 1.0),
            )
        }
    };
}

// Tailwind CSS Color Scales - Values converted from Tailwind's RGB to HSL

scale!(
    slate,
    [
        (210.0, 0.40, 0.980), // #f8fafc
        (210.0, 0.40, 0.961), // #f1f5f9
        (214.3, 0.32, 0.910), // #e2e8f0
        (212.7, 0.27, 0.839), // #cbd5e1
        (214.4, 0.32, 0.710), // #94a3b8
        (215.0, 0.25, 0.569), // #64748b
        (215.3, 0.25, 0.467), // #475569
        (215.4, 0.28, 0.365), // #334155
        (217.2, 0.33, 0.267), // #1e293b
        (222.2, 0.47, 0.110), // #0f172a
        (229.0, 0.84, 0.051)  // #020617
    ]
);

scale!(
    gray,
    [
        (0.0, 0.00, 0.980),   // #f9fafb
        (220.0, 0.14, 0.961), // #f3f4f6
        (220.0, 0.13, 0.910), // #e5e7eb
        (216.0, 0.12, 0.839), // #d1d5db
        (218.0, 0.11, 0.651), // #9ca3af
        (220.0, 0.09, 0.459), // #6b7280
        (215.0, 0.14, 0.341), // #4b5563
        (217.0, 0.19, 0.271), // #374151
        (215.0, 0.28, 0.169), // #1f2937
        (221.0, 0.39, 0.110), // #111827
        (224.0, 0.71, 0.039)  // #030712
    ]
);

scale!(
    zinc,
    [
        (0.0, 0.00, 0.980),   // #fafafa
        (0.0, 0.00, 0.961),   // #f4f4f5
        (240.0, 0.05, 0.902), // #e4e4e7
        (240.0, 0.05, 0.839), // #d4d4d8
        (240.0, 0.05, 0.647), // #a1a1aa
        (240.0, 0.04, 0.459), // #71717a
        (240.0, 0.05, 0.337), // #52525b
        (240.0, 0.05, 0.259), // #3f3f46
        (240.0, 0.04, 0.157), // #27272a
        (240.0, 0.06, 0.100), // #18181b
        (0.0, 0.00, 0.039)    // #09090b
    ]
);

scale!(
    neutral,
    [
        (0.0, 0.00, 0.980), // #fafafa
        (0.0, 0.00, 0.961), // #f5f5f5
        (0.0, 0.00, 0.898), // #e5e5e5
        (0.0, 0.00, 0.831), // #d4d4d4
        (0.0, 0.00, 0.639), // #a3a3a3
        (0.0, 0.00, 0.459), // #737373
        (0.0, 0.00, 0.322), // #525252
        (0.0, 0.00, 0.251), // #404040
        (0.0, 0.00, 0.149), // #262626
        (0.0, 0.00, 0.090), // #171717
        (0.0, 0.00, 0.039)  // #0a0a0a
    ]
);

scale!(
    stone,
    [
        (60.0, 0.09, 0.980), // #fafaf9
        (60.0, 0.09, 0.961), // #f5f5f4
        (20.0, 0.06, 0.902), // #e7e5e4
        (24.0, 0.06, 0.831), // #d6d3d1
        (24.0, 0.05, 0.639), // #a8a29e
        (25.0, 0.05, 0.459), // #78716c
        (33.0, 0.05, 0.325), // #57534e
        (30.0, 0.06, 0.251), // #44403c
        (12.0, 0.07, 0.149), // #292524
        (24.0, 0.10, 0.098), // #1c1917
        (20.0, 0.14, 0.043)  // #0c0a09
    ]
);

scale!(
    red,
    [
        (0.0, 0.86, 0.969), // #fef2f2
        (0.0, 0.93, 0.941), // #fee2e2
        (0.0, 0.96, 0.886), // #fecaca
        (0.0, 0.94, 0.820), // #fca5a5
        (0.0, 0.91, 0.714), // #f87171
        (0.0, 0.84, 0.604), // #ef4444
        (0.0, 0.72, 0.508), // #dc2626
        (0.0, 0.74, 0.420), // #b91c1c
        (0.0, 0.70, 0.337), // #991b1b
        (0.0, 0.63, 0.310), // #7f1d1d
        (0.0, 0.75, 0.149)  // #450a0a
    ]
);

scale!(
    orange,
    [
        (33.0, 1.00, 0.969), // #fff7ed
        (34.0, 1.00, 0.918), // #ffedd5
        (32.0, 0.98, 0.831), // #fed7aa
        (31.0, 0.97, 0.722), // #fdba74
        (27.0, 0.96, 0.610), // #fb923c
        (25.0, 0.95, 0.529), // #f97316
        (21.0, 0.90, 0.486), // #ea580c
        (17.0, 0.88, 0.400), // #c2410c
        (15.0, 0.79, 0.329), // #9a3412
        (15.0, 0.75, 0.278), // #7c2d12
        (13.0, 0.88, 0.145)  // #431407
    ]
);

scale!(
    amber,
    [
        (48.0, 1.00, 0.961), // #fffbeb
        (48.0, 0.96, 0.890), // #fef3c7
        (48.0, 0.97, 0.769), // #fde68a
        (46.0, 0.97, 0.649), // #fcd34d
        (43.0, 0.96, 0.565), // #fbbf24
        (38.0, 0.92, 0.502), // #f59e0b
        (32.0, 0.95, 0.447), // #d97706
        (26.0, 0.90, 0.369), // #b45309
        (23.0, 0.83, 0.310), // #92400e
        (22.0, 0.79, 0.267), // #78350f
        (21.0, 0.92, 0.145)  // #451a03
    ]
);

scale!(
    yellow,
    [
        (55.0, 0.92, 0.949), // #fefce8
        (55.0, 0.97, 0.886), // #fef9c3
        (53.0, 0.98, 0.769), // #fef08a
        (50.0, 0.98, 0.639), // #fde047
        (48.0, 0.96, 0.529), // #facc15
        (45.0, 0.93, 0.478), // #eab308
        (41.0, 0.96, 0.408), // #ca8a04
        (36.0, 0.92, 0.329), // #a16207
        (32.0, 0.81, 0.290), // #854d0e
        (28.0, 0.73, 0.259), // #713f12
        (23.0, 0.83, 0.145)  // #422006
    ]
);

scale!(
    lime,
    [
        (79.0, 0.92, 0.949), // #f7fee7
        (80.0, 0.89, 0.890), // #ecfccb
        (81.0, 0.88, 0.800), // #d9f99d
        (82.0, 0.85, 0.678), // #bef264
        (83.0, 0.78, 0.557), // #a3e635
        (84.0, 0.81, 0.447), // #84cc16
        (85.0, 0.85, 0.353), // #65a30d
        (86.0, 0.78, 0.278), // #4d7c0f
        (88.0, 0.61, 0.239), // #3f6212
        (88.0, 0.61, 0.208), // #365314
        (95.0, 0.76, 0.102)  // #1a2e05
    ]
);

scale!(
    green,
    [
        (138.0, 0.76, 0.969), // #f0fdf4
        (141.0, 0.84, 0.929), // #dcfce7
        (141.0, 0.79, 0.851), // #bbf7d0
        (142.0, 0.77, 0.733), // #86efac
        (142.0, 0.69, 0.584), // #4ade80
        (142.0, 0.71, 0.455), // #22c55e
        (142.0, 0.76, 0.365), // #16a34a
        (142.0, 0.72, 0.290), // #15803d
        (143.0, 0.64, 0.239), // #166534
        (144.0, 0.61, 0.208), // #14532d
        (145.0, 0.80, 0.102)  // #052e16
    ]
);

scale!(
    emerald,
    [
        (152.0, 0.81, 0.961), // #ecfdf5
        (149.0, 0.80, 0.902), // #d1fae5
        (152.0, 0.76, 0.800), // #a7f3d0
        (156.0, 0.73, 0.671), // #6ee7b7
        (158.0, 0.64, 0.522), // #34d399
        (160.0, 0.84, 0.392), // #10b981
        (161.0, 0.94, 0.302), // #059669
        (163.0, 0.94, 0.243), // #047857
        (163.0, 0.88, 0.200), // #065f46
        (165.0, 0.83, 0.173), // #064e3b
        (169.0, 0.78, 0.098)  // #022c22
    ]
);

scale!(
    teal,
    [
        (166.0, 0.76, 0.969), // #f0fdfa
        (167.0, 0.85, 0.890), // #ccfbf1
        (168.0, 0.84, 0.780), // #99f6e4
        (171.0, 0.77, 0.639), // #5eead4
        (172.0, 0.66, 0.502), // #2dd4bf
        (173.0, 0.80, 0.400), // #14b8a6
        (175.0, 0.84, 0.329), // #0d9488
        (175.0, 0.77, 0.267), // #0f766e
        (176.0, 0.69, 0.224), // #115e59
        (176.0, 0.61, 0.192), // #134e4a
        (180.0, 0.84, 0.098)  // #042f2e
    ]
);

scale!(
    cyan,
    [
        (183.0, 1.00, 0.969), // #ecfeff
        (185.0, 0.96, 0.902), // #cffafe
        (186.0, 0.94, 0.820), // #a5f3fc
        (187.0, 0.92, 0.690), // #67e8f9
        (188.0, 0.86, 0.533), // #22d3ee
        (189.0, 0.94, 0.427), // #06b6d4
        (192.0, 0.91, 0.365), // #0891b2
        (193.0, 0.82, 0.310), // #0e7490
        (194.0, 0.70, 0.271), // #155e75
        (196.0, 0.64, 0.239), // #164e63
        (202.0, 0.80, 0.137)  // #083344
    ]
);

scale!(
    sky,
    [
        (204.0, 1.00, 0.969), // #f0f9ff
        (204.0, 0.94, 0.933), // #e0f2fe
        (201.0, 0.94, 0.859), // #bae6fd
        (199.0, 0.95, 0.741), // #7dd3fc
        (198.0, 0.93, 0.600), // #38bdf8
        (199.0, 0.89, 0.482), // #0ea5e9
        (200.0, 0.98, 0.392), // #0284c7
        (201.0, 0.96, 0.322), // #0369a1
        (201.0, 0.90, 0.275), // #075985
        (202.0, 0.80, 0.239), // #0c4a6e
        (204.0, 0.80, 0.157)  // #082f49
    ]
);

scale!(
    blue,
    [
        (214.0, 1.00, 0.969), // #eff6ff
        (214.0, 0.95, 0.929), // #dbeafe
        (213.0, 0.97, 0.871), // #bfdbfe
        (212.0, 0.96, 0.780), // #93c5fd
        (213.0, 0.94, 0.678), // #60a5fa
        (217.0, 0.91, 0.600), // #3b82f6
        (221.0, 0.83, 0.533), // #2563eb
        (224.0, 0.76, 0.478), // #1d4ed8
        (226.0, 0.71, 0.400), // #1e40af
        (224.0, 0.64, 0.329), // #1e3a8a
        (226.0, 0.70, 0.204)  // #172554
    ]
);

scale!(
    indigo,
    [
        (226.0, 1.00, 0.969), // #eef2ff
        (226.0, 1.00, 0.933), // #e0e7ff
        (226.0, 1.00, 0.882), // #c7d2fe
        (226.0, 0.95, 0.788), // #a5b4fc
        (226.0, 0.87, 0.667), // #818cf8
        (231.0, 0.76, 0.588), // #6366f1
        (235.0, 0.84, 0.537), // #4f46e5
        (239.0, 0.84, 0.478), // #4338ca
        (243.0, 0.75, 0.400), // #3730a3
        (244.0, 0.70, 0.337), // #312e81
        (244.0, 0.79, 0.212)  // #1e1b4b
    ]
);

scale!(
    violet,
    [
        (250.0, 1.00, 0.976), // #faf5ff
        (251.0, 0.91, 0.949), // #f3e8ff
        (251.0, 0.95, 0.898), // #e9d5ff
        (252.0, 0.95, 0.820), // #d8b4fe
        (253.0, 0.95, 0.718), // #c084fc
        (255.0, 0.92, 0.627), // #a855f7
        (258.0, 0.90, 0.561), // #9333ea
        (262.0, 0.83, 0.478), // #7e22ce
        (263.0, 0.70, 0.404), // #6b21a8
        (263.0, 0.69, 0.341), // #581c87
        (261.0, 0.73, 0.216)  // #3b0764
    ]
);

scale!(
    purple,
    [
        (270.0, 1.00, 0.980), // #faf5ff
        (269.0, 1.00, 0.949), // #f3e8ff
        (269.0, 1.00, 0.906), // #e9d5ff
        (269.0, 0.97, 0.851), // #d8b4fe
        (270.0, 0.95, 0.757), // #c084fc
        (271.0, 0.91, 0.651), // #a855f7
        (271.0, 0.81, 0.559), // #9333ea
        (272.0, 0.72, 0.471), // #7e22ce
        (273.0, 0.67, 0.392), // #6b21a8
        (274.0, 0.66, 0.325), // #581c87
        (275.0, 1.00, 0.184)  // #3b0764
    ]
);

scale!(
    fuchsia,
    [
        (289.0, 1.00, 0.976), // #fdf4ff
        (287.0, 1.00, 0.949), // #fae8ff
        (288.0, 0.96, 0.894), // #f5d0fe
        (291.0, 0.93, 0.827), // #f0abfc
        (292.0, 0.91, 0.729), // #e879f9
        (292.0, 0.84, 0.608), // #d946ef
        (293.0, 0.69, 0.490), // #c026d3
        (295.0, 0.72, 0.404), // #a21caf
        (295.0, 0.70, 0.329), // #86198f
        (297.0, 0.64, 0.275), // #701a75
        (297.0, 0.90, 0.157)  // #4a044e
    ]
);

scale!(
    pink,
    [
        (327.0, 0.73, 0.969), // #fdf2f8
        (326.0, 0.78, 0.933), // #fce7f3
        (326.0, 0.85, 0.890), // #fbcfe8
        (327.0, 0.87, 0.816), // #f9a8d4
        (328.0, 0.86, 0.702), // #f472b6
        (330.0, 0.81, 0.604), // #ec4899
        (333.0, 0.71, 0.506), // #db2777
        (335.0, 0.78, 0.420), // #be185d
        (336.0, 0.74, 0.353), // #9d174d
        (336.0, 0.69, 0.302), // #831843
        (336.0, 0.84, 0.165)  // #500724
    ]
);

scale!(
    rose,
    [
        (356.0, 1.00, 0.969), // #fff1f2
        (356.0, 1.00, 0.941), // #ffe4e6
        (353.0, 0.96, 0.886), // #fecdd3
        (353.0, 0.96, 0.820), // #fda4af
        (351.0, 0.95, 0.714), // #fb7185
        (350.0, 0.89, 0.604), // #f43f5e
        (347.0, 0.77, 0.498), // #e11d48
        (345.0, 0.83, 0.408), // #be123c
        (343.0, 0.80, 0.349), // #9f1239
        (343.0, 0.75, 0.306), // #881337
        (343.0, 0.88, 0.161)  // #4c0519
    ]
);
